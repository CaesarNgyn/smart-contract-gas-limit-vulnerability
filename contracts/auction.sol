// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

// Ownable gives the contract an owner who can perform privileged operations.
// ReentrancyGuard prevents reentrant calls to certain functions.

contract Auction is Ownable, ReentrancyGuard {
    // This ensures a safe transfer of Ether, reverting the transaction if the transfer fails. Utilizing sendValue() method directly
    using Address for address payable;

    /* currentLeader: Stores the address of the highest bidder.
    highestBid: Stores the value of the highest bid.
    Refund[] refunds: An array to keep track of refunds that need to be issued. */

    address payable public currentLeader;
    uint256 public highestBid;

    struct Refund {
        address payable addr;
        uint256 amount;
    }

    Refund[] public refunds;

    //The constructor takes an initialOwner address and passes it to the Ownable constructor.
    constructor() Ownable(msg.sender) {
        // Constructor sets the deployer as the initial owner
    }

    function bid() external payable nonReentrant {
        require(msg.value > highestBid, "Bid not high enough");

        if (currentLeader != address(0)) {
            refunds.push(Refund(currentLeader, highestBid));
        }

        currentLeader = payable(msg.sender);
        highestBid = msg.value;
    }

    function refundAll() external onlyOwner nonReentrant {
        for (uint256 i = 0; i < refunds.length; i++) {
            refunds[i].addr.sendValue(refunds[i].amount);
        }
        delete refunds;
    }
}
